{"ast":null,"code":"export default {\n  data() {\n    return {\n      msg: \"Hello Computed\"\n    };\n  },\n  methods: {\n    reverseMessage() {\n      console.log(\"이것은 메소드 입니다.\");\n      //split() 메서드는 받은 문자열을 인수에 있는 문자열로 나눠서 배열 - split('') 는 문자 하나하나를 배열로 만들고\n      //reverse() 메서드는 배열의 순서를 반대로 만들어 줍니다.\n      //join() 메서드는 배열의 값 사이에 인자값을 넣은 문자열을 만들어 줍니다.\n      //https://kpbro.tistory.com/3\n      return this.msg.split(\"\").reverse().join(\"\");\n    }\n  },\n  computed: {\n    /** 데이터\r\n     문법적으로 methods 와의 차이\r\n        - 리턴되는 값을 가짐(데이터처럼 취급)\r\n        - 파라미터가 없음 => 호출할 때 괄호없이 호출\r\n     언제 호출되는가?\r\n     한번 호출을 함 -> 캐시 공간에 저장함.\r\n     해당 데이터가 변화가 없으면, 함수를 호출하는게 아니고,\r\n     캐시에 있는 값을 그냥 리턴해줌\r\n     computedMessage: Hello Computed\r\n     */\n    computedMessage() {\n      console.log(\"이것은 computed 입니다.\");\n      //split() 메서드는 받은 문자열을 인수에 있는 문자열로 나눠서 배열 - split('') 는 문자 하나하나를 배열로 만들고\n      //reverse() 메서드는 배열의 순서를 반대로 만들어 줍니다.\n      //join() 메서드는 배열의 값 사이에 인자값을 넣은 문자열을 만들어 줍니다.\n      //https://kpbro.tistory.com/3\n      return this.msg.split(\"\").reverse().join(\"\");\n    }\n  }\n};","map":{"version":3,"names":["data","msg","methods","reverseMessage","console","log","split","reverse","join","computed","computedMessage"],"sources":["C:\\project\\vue-project\\src\\views\\functions\\MethodVSComputed1.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <h1>{{ reverseMessage() }}</h1>\r\n    <h1>{{ reverseMessage() }}</h1>\r\n    <h1>{{ reverseMessage() }}</h1>\r\n    <h1>{{ reverseMessage() }}</h1>\r\n  </div>\r\n  <hr />\r\n  <div>\r\n    <h1>{{ computedMessage }}</h1>\r\n    <h1>{{ computedMessage }}</h1>\r\n    <h1>{{ computedMessage }}</h1>\r\n    <h1>{{ computedMessage }}</h1>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  data() {\r\n    return {\r\n      msg: \"Hello Computed\",\r\n    };\r\n  },\r\n  methods: {\r\n    reverseMessage() {\r\n      console.log(\"이것은 메소드 입니다.\");\r\n      //split() 메서드는 받은 문자열을 인수에 있는 문자열로 나눠서 배열 - split('') 는 문자 하나하나를 배열로 만들고\r\n      //reverse() 메서드는 배열의 순서를 반대로 만들어 줍니다.\r\n      //join() 메서드는 배열의 값 사이에 인자값을 넣은 문자열을 만들어 줍니다.\r\n      //https://kpbro.tistory.com/3\r\n      return this.msg.split(\"\").reverse().join(\"\");\r\n    },\r\n  },\r\n  computed: {\r\n    /** 데이터\r\n     문법적으로 methods 와의 차이\r\n        - 리턴되는 값을 가짐(데이터처럼 취급)\r\n        - 파라미터가 없음 => 호출할 때 괄호없이 호출\r\n     언제 호출되는가?\r\n     한번 호출을 함 -> 캐시 공간에 저장함.\r\n     해당 데이터가 변화가 없으면, 함수를 호출하는게 아니고,\r\n     캐시에 있는 값을 그냥 리턴해줌\r\n     computedMessage: Hello Computed\r\n     */\r\n    computedMessage() {\r\n      console.log(\"이것은 computed 입니다.\");\r\n      //split() 메서드는 받은 문자열을 인수에 있는 문자열로 나눠서 배열 - split('') 는 문자 하나하나를 배열로 만들고\r\n      //reverse() 메서드는 배열의 순서를 반대로 만들어 줍니다.\r\n      //join() 메서드는 배열의 값 사이에 인자값을 넣은 문자열을 만들어 줍니다.\r\n      //https://kpbro.tistory.com/3\r\n      return this.msg.split(\"\").reverse().join(\"\");\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped></style>\r\n"],"mappings":"AAiBA,eAAe;EACbA,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,GAAG,EAAE;IACP,CAAC;EACH,CAAC;EACDC,OAAO,EAAE;IACPC,cAAcA,CAAA,EAAG;MACfC,OAAO,CAACC,GAAG,CAAC,cAAc,CAAC;MAC3B;MACA;MACA;MACA;MACA,OAAO,IAAI,CAACJ,GAAG,CAACK,KAAK,CAAC,EAAE,CAAC,CAACC,OAAO,CAAC,CAAC,CAACC,IAAI,CAAC,EAAE,CAAC;IAC9C;EACF,CAAC;EACDC,QAAQ,EAAE;IACR;;;;;;;;;;IAUAC,eAAeA,CAAA,EAAG;MAChBN,OAAO,CAACC,GAAG,CAAC,mBAAmB,CAAC;MAChC;MACA;MACA;MACA;MACA,OAAO,IAAI,CAACJ,GAAG,CAACK,KAAK,CAAC,EAAE,CAAC,CAACC,OAAO,CAAC,CAAC,CAACC,IAAI,CAAC,EAAE,CAAC;IAC9C;EACF;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}