{"version":3,"file":"js/compo1.6732d201.js","mappings":"uNAEIA,EAAAA,EAAAA,GAAmB,UAAf,cAAU,G,GAGZA,EAAAA,EAAAA,GAAgB,YAAV,OAAG,G,GAETA,EAAAA,EAAAA,GAAgB,YAAV,OAAG,G,GAIbA,EAAAA,EAAAA,GAAI,mB,8DAVJA,EAAAA,EAAAA,GASM,YARJC,GACAD,EAAAA,EAAAA,GAMM,sBALJA,EAAAA,EAAAA,GAA+D,SAAxDE,KAAK,O,qCAAgBC,EAAAC,MAAMC,KAAIC,GAAGC,QAAKC,EAAA,KAAAA,EAAA,OAAAC,IAAEN,EAAAO,aAAAP,EAAAO,eAAAD,K,iBAApBN,EAAAC,MAAMC,QAClCM,GAAgB,SAChBX,EAAAA,EAAAA,GAA+D,SAAxDE,KAAK,O,qCAAgBC,EAAAC,MAAMQ,KAAIN,GAAGC,QAAKC,EAAA,KAAAA,EAAA,OAAAC,IAAEN,EAAAO,aAAAP,EAAAO,eAAAD,K,iBAApBN,EAAAC,MAAMQ,QAClCC,GACAb,EAAAA,EAAAA,GAA+B,aAAAc,EAAAA,EAAAA,IAAtBX,EAAAC,MAAMW,QAAM,OAGzBC,GAAI,yBACQF,EAAAA,EAAAA,IAAGX,EAAAc,KAAG,O,eAkBpB,GACEC,KAAAA,GAEE,MAAMD,GAAME,EAAAA,EAAAA,IAAI,GAIhB,IAAIf,GAAQgB,EAAAA,EAAAA,IAAS,CACnBf,KAAM,EACNO,KAAM,EACNG,OAAQ,IAGV,SAASL,IACPN,EAAMW,OAASM,SAASjB,EAAMC,MAAQgB,SAASjB,EAAMQ,KACvD,CAEA,MAAO,CAELK,MACAb,QACAM,cAEJ,G,QChDF,MAAMY,GAA2B,OAAgB,EAAQ,CAAC,CAAC,SAASC,KAEpE,O","sources":["webpack://vue3-jjw-example/./src/views/composition/CalculatorComposition1.vue","webpack://vue3-jjw-example/./src/views/composition/CalculatorComposition1.vue?1b5f"],"sourcesContent":["<template>\n  <div>\n    <h2>Calculator</h2>\n    <div>\n      <input type=\"text\" v-model=\"state.num1\" @keyup=\"plusNumbers\" />\n      <span> + </span>\n      <input type=\"text\" v-model=\"state.num2\" @keyup=\"plusNumbers\" />\n      <span> = </span>\n      <span>{{ state.result }}</span>\n    </div>\n  </div>\n  <hr>\n  컴포지션에서의 바인딩 {{ num }}\n</template>\n\n\n<script>\n/*\nComposition API 와 setup 함수의 등장\n컴포지션 API에서 첫번째 특징이 setup() 함수 이다.\n\nsetup() 함수에 관하여\n  -setup 함수는, Vue 3 에서 새로 나온 Composition API 이다.\n  - 기존에 data, methods 등으로 흩어져있던것을, 하나의 장소로 모으게 해준다.\n  - template 에서 사용하고자하는 변수, 함수등을 정의한뒤,\n  - 객체에 하나씩 골라담아, return 해주면 template 에서 해당 변수와 함수를 접근할수있다.. \n */\n\nimport {reactive, ref} from 'vue'\n\nexport default {\n  setup() {\n\n    const num = ref(0);\n\n\n\n    let state = reactive({\n      num1: 0,\n      num2: 0,\n      result: 0      \n    })\n\n    function plusNumbers() {\n      state.result = parseInt(state.num1) + parseInt(state.num2)\n    }\n\n    return {\n      //reactive로 선언된 state와 plusNumbers 함수를 반환함으로써 기존 data, methods 옵션 처럼 사용이 가능해짐\n      num,\n      state,\n      plusNumbers\n    }\n  }\n}\n</script>","import { render } from \"./CalculatorComposition1.vue?vue&type=template&id=3844e541\"\nimport script from \"./CalculatorComposition1.vue?vue&type=script&lang=js\"\nexport * from \"./CalculatorComposition1.vue?vue&type=script&lang=js\"\n\nimport exportComponent from \"../../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__"],"names":["_createElementVNode","_hoisted_1","type","$setup","state","num1","$event","onKeyup","_cache","args","plusNumbers","_hoisted_2","num2","_hoisted_3","_toDisplayString","result","_hoisted_4","num","setup","ref","reactive","parseInt","__exports__","render"],"sourceRoot":""}