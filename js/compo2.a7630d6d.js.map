{"version":3,"file":"js/compo2.a7630d6d.js","mappings":"uNAEIA,EAAAA,EAAAA,GAAmB,UAAf,cAAU,G,GAGZA,EAAAA,EAAAA,GAAgB,YAAV,OAAG,G,GAETA,EAAAA,EAAAA,GAAgB,YAAV,OAAG,G,0CANbC,EAAAA,EAAAA,IAWM,YAVJC,GACAF,EAAAA,EAAAA,GAMM,sBALJA,EAAAA,EAAAA,GAAyD,SAAlDG,KAAK,O,qCAAgBC,EAAAC,KAAIC,GAAGC,QAAKC,EAAA,KAAAA,EAAA,OAAAC,IAAEL,EAAAM,aAAAN,EAAAM,eAAAD,K,iBAAdL,EAAAC,QAC5BM,GAAgB,SAChBX,EAAAA,EAAAA,GAA+D,SAAxDG,KAAK,O,qCAAgBC,EAAAQ,MAAMC,KAAIP,GAAGC,QAAKC,EAAA,KAAAA,EAAA,OAAAC,IAAEL,EAAAM,aAAAN,EAAAM,eAAAD,K,iBAApBL,EAAAQ,MAAMC,QAClCC,GACAd,EAAAA,EAAAA,GAA+B,aAAAe,EAAAA,EAAAA,IAAtBX,EAAAQ,MAAMI,QAAM,MAEvBhB,EAAAA,EAAAA,GAA2E,WAAtE,0DAAsDe,EAAAA,EAAAA,IAAGX,EAAAC,MAAI,IAClEL,EAAAA,EAAAA,GAAiC,WAA5B,UAAMe,EAAAA,EAAAA,IAAGX,EAAAQ,MAAMC,MAAI,I,eAwB5B,GACEI,KAAAA,GACE,IAAIZ,GAAOa,EAAAA,EAAAA,IAAI,GAEXN,GAAQO,EAAAA,EAAAA,IAAS,CAEnBN,KAAM,EACNG,OAAQ,IAGV,SAASN,IACPE,EAAMI,OAASI,SAASf,EAAKgB,OAASD,SAASR,EAAMC,KACvD,CAEA,MAAO,CACLR,OACAO,QACAF,cAEJ,G,QCjDF,MAAMY,GAA2B,OAAgB,EAAQ,CAAC,CAAC,SAASC,KAEpE,O","sources":["webpack://vue3-jjw-example/./src/views/composition/CompositionRef2.vue","webpack://vue3-jjw-example/./src/views/composition/CompositionRef2.vue?0060"],"sourcesContent":["<template>\n  <div>\n    <h2>Calculator</h2>\n    <div>\n      <input type=\"text\" v-model=\"num1\" @keyup=\"plusNumbers\" />\n      <span> + </span>\n      <input type=\"text\" v-model=\"state.num2\" @keyup=\"plusNumbers\" />\n      <span> = </span>\n      <span>{{ state.result }}</span>\n    </div>\n    <div>ref에서는 .value를 붙여야 접근할 수 있음. 템플릿 안에서 사용할 때는 붙이지 않아도 됨 {{ num1 }}</div>\n    <div>num2: {{ state.num2 }}</div>\n  </div>\n</template>\n<script>\n/*\n반응형의 의미 : 컴포지션 API에서는 2가지 유형(reactive, ref)의 변경 가능한 반응형 데이터를 만들 수 있습니다.\n반응형 데이터는 값이 변경됨에 따라 이를 감지하고 해당 값에 종속된 작업(Side Effect)이 수행됩니다.\n\nref와 reactive의 차이\n1. 타입의 제한\nref에서는 String, Number, Object 등 어떤 타입에서든 사용 가능\nreactive에서는 Object, Array, Map, Set과 같은 타입에서만 사용 가능\nreactive에서 String, Number의 값을 초기에 지정하여 사용할 경우 원시값에 대해서는 반응형을 가지지 않음\n\n2.접근 방식\nref에서는 .value를 붙여야 접근할 수 있음. <template> 안에서 사용할 때는 붙이지 않아도 됨\nreactive는 .value를 붙이지 않아도 접근할 수 있음.\n\n잘 설명된 사이트\nhttps://geundung.dev/108?category=782810\n\n*/\nimport { ref, reactive } from 'vue'\n\nexport default {\n  setup() {\n    let num1 = ref(0)\n\n    let state = reactive({\n      //reactive를 이용해서 num1, num2, result를 실시간 변경사항에 대한 반응형 적용\n      num2: 0,\n      result: 0\n    })\n\n    function plusNumbers() {\n      state.result = parseInt(num1.value) + parseInt(state.num2)\n    }\n\n    return {\n      num1,\n      state,\n      plusNumbers\n    }\n  }\n}\n</script>","import { render } from \"./CompositionRef2.vue?vue&type=template&id=50eb135c\"\nimport script from \"./CompositionRef2.vue?vue&type=script&lang=js\"\nexport * from \"./CompositionRef2.vue?vue&type=script&lang=js\"\n\nimport exportComponent from \"../../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__"],"names":["_createElementVNode","_createElementBlock","_hoisted_1","type","$setup","num1","$event","onKeyup","_cache","args","plusNumbers","_hoisted_2","state","num2","_hoisted_3","_toDisplayString","result","setup","ref","reactive","parseInt","value","__exports__","render"],"sourceRoot":""}